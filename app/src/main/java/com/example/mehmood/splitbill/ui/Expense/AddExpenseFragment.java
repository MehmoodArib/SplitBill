package com.example.mehmood.splitbill.ui.Expense;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.LinearLayout;import android.widget.TextView;import com.example.mehmood.splitbill.R;import com.example.mehmood.splitbill.data.Contact;import com.example.mehmood.splitbill.data.DetailedActivityViewModel;import com.example.mehmood.splitbill.data.Event;import com.example.mehmood.splitbill.data.Expense;import com.example.mehmood.splitbill.utils.Utilities.Utility;import com.google.android.material.textfield.TextInputEditText;import java.util.ArrayList;import java.util.HashSet;import java.util.Objects;import androidx.annotation.NonNull;import androidx.fragment.app.Fragment;import androidx.lifecycle.Observer;import androidx.lifecycle.ViewModelProviders;import it.sephiroth.android.library.checkbox3state.CheckBox3;public class AddExpenseFragment extends Fragment {    private TextInputEditText mExpenseNameTextInputEditText;    private TextInputEditText mExpenseAmountTextInputEditText;    private Button mAddExpenseButton;    final ArrayList<CheckBox> checkbox_array = new ArrayList<>();    private DetailedActivityViewModel detailedActivityViewModel;    private String expenseName;    private Double expenseAmount;    private Expense mExpense = new Expense();    private Integer eventId;    Boolean listenToUpdates = true;    LinearLayout mPaidForLinearLayout;    //    private Switch mPaidByMeSwitch;//    private Switch mPaidForAllSwitch;    private CheckBox3 checkBox1;    //    private HashSet<Contact> paidByList = new HashSet<>();//    private HashSet<Contact> paidForList = new HashSet<>();    private HashSet<Contact> participants;    @Override    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        super.onCreateView(inflater, container, savedInstanceState);        final View view = inflater.inflate(R.layout.fragment_add_expense, container,                false);        setHasOptionsMenu(false);        detailedActivityViewModel = ViewModelProviders.of(getActivity()).get(DetailedActivityViewModel.class);        assert getArguments() != null;        eventId = getArguments().getInt(Utility.eventId, -1);        checkBox1 = view.findViewById(R.id.checkBox1);        mPaidForLinearLayout = view.findViewById(R.id.paidForLinearLayout);        mPaidForLinearLayout.setVisibility(View.GONE);        detailedActivityViewModel.getEvent().observe(this, new Observer<Event>() {            @Override            public void onChanged(Event event) {                participants = event.getParticipantsList();                for (final Contact participant : participants) {                    View view1 = LayoutInflater.from(getActivity()).inflate(R.layout.participant, null);                    TextView textView = view1.findViewById(R.id.participantTextView);                    textView.setText(participant.getName());                    CheckBox checkBox = view1.findViewById(R.id.checkBox);                    checkbox_array.add(checkBox);                    checkBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {                        @Override                        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                            if (listenToUpdates) {                                listenToUpdates = false;                                int checked_size = numberOfCheckedCheckBoxes(checkbox_array);                                if (checked_size == checkbox_array.size()) {                                    checkBox1.setCycle(R.array.sephiroth_checkbox3_cycleCheckedUncheckedOnly);                                    checkBox1.setChecked(true, false);                                    checkBox1.setText("Select None");                                } else if (checked_size == 0) {                                    checkBox1.setCycle(R.array.sephiroth_checkbox3_cycleCheckedUncheckedOnly);                                    checkBox1.setChecked(false, false);                                    checkBox1.setText("Select All");                                } else {                                    checkBox1.setCycle(R.array.sephiroth_checkbox3_cycleAll);                                    checkBox1.setChecked(false, true);                                    checkBox1.setText("Select All");                                }                                listenToUpdates = true;                            }                        }                    });                    mPaidForLinearLayout.addView(view1);                }            }        });        mExpenseAmountTextInputEditText = view.findViewById(R.id.textInputEditTextExpenseAmount);        mExpenseNameTextInputEditText = view.findViewById(R.id.textInputEditTextExpenseName);        mAddExpenseButton = view.findViewById(R.id.buttonAddExpense);        mAddExpenseButtonListener();        checkBox1.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (listenToUpdates) {                    listenToUpdates = false;                    CheckBox checkBox;                    if (!isChecked) {                        for (int i = 0; i < checkbox_array.size(); i++) {                            checkBox = checkbox_array.get(i);                            checkBox.setChecked(false);                            mPaidForLinearLayout.setVisibility(View.VISIBLE);                        }                    } else if (isChecked) {                        for (int i = 0; i < checkbox_array.size(); i++) {                            checkBox = checkbox_array.get(i);                            checkBox.setChecked(false);                            mPaidForLinearLayout.setVisibility(View.GONE);                        }                    }                }                if (isChecked)                    checkBox1.setText("Select None");                else                    checkBox1.setText("Select All");                checkBox1.setCycle(R.array.sephiroth_checkbox3_cycleCheckedUncheckedOnly);                listenToUpdates = true;            }        });//                final LinearLayout mPaidByLinearLayout;//                final LinearLayout mPAidForLinearLayout;//                mPaidByLinearLayout = view.findViewById(R.id.paidByLinearLayout);//                mPAidForLinearLayout = view.findViewById(R.id.paidForLinearLayout);//                mPaidByMeSwitch = view.findViewById(R.id.paidByMeSwitchButton);//                mPaidForAllSwitch = view.findViewById(R.id.paidForAllSwitchButton);//                mPaidByLinearLayout.setVisibility(View.GONE);//                mPAidForLinearLayout.setVisibility(View.GONE);////                for (final Contact participant : participants) {//                    View view1 = LayoutInflater.from(getActivity()).inflate(R.layout.participant, null);//                    TextView textView = view1.findViewById(R.id.participantTextView);//                    textView.setText(participant.getName());//                    Switch mSwitch = view1.findViewById(R.id.switch1);//                    mSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {//                        @Override//                        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {//                            if (isChecked) {//                                paidByList.add(participant);//                            }//                            if (!isChecked) {//                                if (paidByList.contains(participant)) ;//                                paidByList.remove(participant);//                            }//                        }//                    });//                    mPaidByLinearLayout.addView(view1);//                }//////                for (final Contact participant : participants) {//                    View view2 = LayoutInflater.from(getActivity()).inflate(R.layout.participant, null);//                    TextView textView = view2.findViewById(R.id.participantTextView);//                    textView.setText(participant.getName());//                    Switch mSwitch = view2.findViewById(R.id.switch1);//                    mSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {//                        @Override//                        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {//                            if (isChecked) {//                                paidForList.add(participant);//                            }//                            if (!isChecked) {//                                if (paidByList.contains(participant))//                                    paidForList.remove(participant);//                            }//                        }//                    });//                    mPAidForLinearLayout.addView(view2);//                }////////                mPaidForAllSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {//                    @Override//                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {//                        if (mPaidForAllSwitch.isChecked()) {//                            paidForList.addAll(participants);//                            mPAidForLinearLayout.setVisibility(View.GONE);//                        }//                        if (!mPaidForAllSwitch.isChecked()) {//                            if (!paidByList.isEmpty())//                                paidForList.clear();//                            mPAidForLinearLayout.setVisibility(View.VISIBLE);//                        }//                    }//                });//                mPaidByMeSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {//                    @Override//                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {//                        if (mPaidByMeSwitch.isChecked()) {//                            //  paidByList.add();//                            mPaidByLinearLayout.setVisibility(View.GONE);//                        }//                        if (!mPaidByMeSwitch.isChecked()) {//                            if (!paidByList.isEmpty())//                                paidByList.clear();//                            mPaidByLinearLayout.setVisibility(View.VISIBLE);//                        }//                    }//                });        return view;    }    private void mAddExpenseButtonListener() {        mAddExpenseButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (!validateExpenseName()) return;                if (!validateExpenseAmount()) return;                mExpense.setExpenseName(expenseName);                mExpense.setExpenseAmount(expenseAmount);                mExpense.setExpenseEventId(eventId);                detailedActivityViewModel.addExpense(mExpense);                //pop-ing up this fragment to go back to ExpenseFragment.                androidx.fragment.app.Fragment fragment = getActivity().getSupportFragmentManager().findFragmentByTag(AddExpenseFragment.class.getSimpleName());                if (fragment != null)                    getActivity().getSupportFragmentManager().popBackStack();            }        });    }    private boolean validateExpenseAmount() {        expenseAmount = Double.valueOf(Objects.requireNonNull(mExpenseAmountTextInputEditText.getText()).toString().trim());        if (expenseAmount <= 0) {            mExpenseAmountTextInputEditText.setError("Expense Should be greater then 0");            return false;        } else {            mExpenseAmountTextInputEditText.setError(null);            return true;        }    }    private boolean validateExpenseName() {        expenseName = mExpenseNameTextInputEditText.getText().toString().trim();        if (expenseName.isEmpty()) {            mExpenseNameTextInputEditText.setError("Field Can't be empty");            return false;        }        if (expenseName.length() > 20) {            mExpenseNameTextInputEditText.setError("Maximum 20 characters Allowed");            return false;        } else {            mExpenseNameTextInputEditText.setError(null);            return true;        }    }    private int numberOfCheckedCheckBoxes(ArrayList<CheckBox> checkBoxes) {        int count = 0;        CheckBox checkBox;        for (int i = 0; i < checkBoxes.size(); i++) {            checkBox = checkBoxes.get(i);            if (checkBox.isChecked()) ;            count++;        }        return count;    }}