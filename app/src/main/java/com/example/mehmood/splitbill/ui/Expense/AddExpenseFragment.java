package com.example.mehmood.splitbill.ui.Expense;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.CompoundButton;import android.widget.LinearLayout;import android.widget.Switch;import android.widget.TextView;import com.example.mehmood.splitbill.R;import com.example.mehmood.splitbill.data.Contact;import com.example.mehmood.splitbill.data.DetailedActivityViewModel;import com.example.mehmood.splitbill.data.Event;import com.example.mehmood.splitbill.data.Expense;import com.example.mehmood.splitbill.utils.Utilities.Utility;import com.google.android.material.checkbox.MaterialCheckBox;import com.google.android.material.textfield.TextInputEditText;import java.util.HashSet;import java.util.Objects;import androidx.annotation.NonNull;import androidx.fragment.app.Fragment;import androidx.lifecycle.Observer;import androidx.lifecycle.ViewModelProviders;import it.sephiroth.android.library.checkbox3state.CheckBox3;public class AddExpenseFragment extends Fragment {    private TextInputEditText mExpenseNameTextInputEditText;    private TextInputEditText mExpenseAmountTextInputEditText;    private Button mAddExpenseButton;    private CheckBox3 mMaterialCheckBoxPaidBy;    private CheckBox3 mMaterialCheckBoxPAidFor;    private DetailedActivityViewModel detailedActivityViewModel;    private String expenseName;    private Double expenseAmount;    private Expense mExpense = new Expense();    private Integer eventId;    private HashSet<Contact> paidByList = new HashSet<>();    private HashSet<Contact> paidForList = new HashSet<>();    private HashSet<Contact> participants;    @Override    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        super.onCreateView(inflater, container, savedInstanceState);        final View view = inflater.inflate(R.layout.fragment_add_expense, container,                false);        setHasOptionsMenu(false);        detailedActivityViewModel = ViewModelProviders.of(getActivity()).get(DetailedActivityViewModel.class);        assert getArguments() != null;        eventId = getArguments().getInt(Utility.eventId, -1);        detailedActivityViewModel.getEvent().observe(this, new Observer<Event>() {            @Override            public void onChanged(Event event) {                participants = event.getParticipantsList();                final LinearLayout mPaidByLinearLayout;                final LinearLayout mPAidForLinearLayout;                mPaidByLinearLayout = view.findViewById(R.id.paidByLinearLayout);                mPAidForLinearLayout = view.findViewById(R.id.paidForLinearLayout);                mMaterialCheckBoxPaidBy = view.findViewById(R.id.paidByMeSwitchButton);                mMaterialCheckBoxPAidFor = view.findViewById(R.id.paidForAllSwitchButton);                mPaidByLinearLayout.setVisibility(View.GONE);                mPAidForLinearLayout.setVisibility(View.GONE);                for (final Contact participant : participants) {                    View view1 = LayoutInflater.from(getActivity()).inflate(R.layout.participant, null);                    TextView textView = view1.findViewById(R.id.participantTextView);                    textView.setText(participant.getName());                    MaterialCheckBox mMaterialCheckBox = view1.findViewById(R.id.checkBox1);                    mMaterialCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {                        @Override                        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                            if (isChecked) {                                paidByList.add(participant);                            }                            if (!isChecked) {                                if (paidByList.contains(participant)) ;                                paidByList.remove(participant);                            }                        }                    });                    mPaidByLinearLayout.addView(view1);                }                for (final Contact participant : participants) {                    View view2 = LayoutInflater.from(getActivity()).inflate(R.layout.participant, null);                    TextView textView = view2.findViewById(R.id.participantTextView);                    textView.setText(participant.getName());                    MaterialCheckBox mMaterialCheckBox = view2.findViewById(R.id.checkBox1);                    mMaterialCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {                        @Override                        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                            if (isChecked) {                                paidForList.add(participant);                            }                            if (!isChecked) {                                if (paidByList.contains(participant))                                    paidForList.remove(participant);                            }                        }                    });                    mPAidForLinearLayout.addView(view2);                }                mMaterialCheckBoxPAidFor.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {                    @Override                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                        if (mMaterialCheckBoxPAidFor.isChecked()) {                            paidForList.addAll(participants);                            mPAidForLinearLayout.setVisibility(View.GONE);                        }                        if (!mMaterialCheckBoxPAidFor.isChecked()) {                            if (!paidByList.isEmpty())                                paidForList.clear();                            mPAidForLinearLayout.setVisibility(View.VISIBLE);                        }                    }                });                mMaterialCheckBoxPaidBy.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {                    @Override                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                        if (mMaterialCheckBoxPaidBy.isChecked()) {                            //  paidByList.add();                            mPaidByLinearLayout.setVisibility(View.GONE);                        }                        if (!mMaterialCheckBoxPaidBy.isChecked()) {                            if (!paidByList.isEmpty())                                paidByList.clear();                            mPaidByLinearLayout.setVisibility(View.VISIBLE);                        }                    }                });            }        });        mExpenseAmountTextInputEditText = view.findViewById(R.id.textInputEditTextExpenseAmount);        mExpenseNameTextInputEditText = view.findViewById(R.id.textInputEditTextExpenseName);        mAddExpenseButton = view.findViewById(R.id.buttonAddExpense);        mAddExpenseButtonListener();        return view;    }    private void mAddExpenseButtonListener() {        mAddExpenseButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (!validateExpenseName()) return;                if (!validateExpenseAmount()) return;                mExpense.setExpenseName(expenseName);                mExpense.setExpenseAmount(expenseAmount);                mExpense.setExpenseEventId(eventId);                detailedActivityViewModel.addExpense(mExpense);                //pop-ing up this fragment to go back to ExpenseFragment.                androidx.fragment.app.Fragment fragment = getActivity().getSupportFragmentManager().findFragmentByTag(AddExpenseFragment.class.getSimpleName());                if (fragment != null)                    getActivity().getSupportFragmentManager().popBackStack();            }        });    }    private boolean validateExpenseAmount() {        expenseAmount = Double.valueOf(Objects.requireNonNull(mExpenseAmountTextInputEditText.getText()).toString().trim());        if (expenseAmount <= 0) {            mExpenseAmountTextInputEditText.setError("Expense Should be greater then 0");            return false;        } else {            mExpenseAmountTextInputEditText.setError(null);            return true;        }    }    private boolean validateExpenseName() {        expenseName = mExpenseNameTextInputEditText.getText().toString().trim();        if (expenseName.isEmpty()) {            mExpenseNameTextInputEditText.setError("Field Can't be empty");            return false;        }        if (expenseName.length() > 20) {            mExpenseNameTextInputEditText.setError("Maximum 20 characters Allowed");            return false;        } else {            mExpenseNameTextInputEditText.setError(null);            return true;        }    }}